//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  SOKOIL VIPER Template generated by Michail Vdovin
//

class ___VARIABLE_productName:identifier___Interactor: ___VARIABLE_productName:identifier___InteractorInputProtocol {

    weak var presenter: ___VARIABLE_productName:identifier___InteractorOutputProtocol?
    let disposeBag = DisposeBag()
    
    var tempRepository: TempRepository?

    func loadData() {
        self.tempRepository?
            .temp()
            .subscribeOn(MainScheduler.asyncInstance)
            .observeOn(MainScheduler.instance)
            .subscribe { [presenter] event in
                switch event {
                case .next(let data):
                    presenter?.onDataLoaded(data: data)
                    break
                case .error(let error):
                    presenter?.onLoadError(error: error as! BaseErrorHandler.BaseError)
                    break
                case .completed:
                    break
                }
            }
            .disposed(by: disposeBag)
        
    }
}
